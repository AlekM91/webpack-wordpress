@use "sass:math";

// ------------------
// Responsive mixins
// -------------------
@mixin media-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);

    @if $min {

        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin media-down($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    $current: map-get($breakpoints, $name);
    $current-max: $current - .02px;

    @if $min {

        @media (max-width: $current-max) {
            @content;
        }
    } @else {
        @content;
    }
}

// This is for landscape devices + landscape for iPhone X (which has really wide height, so on landscape height becomes width -> goes over 768px breakpoint
// IMPORTANT: This breakpoint should be used after @include media-up(m -> or anything that is above tablets), so it successfully overrides it
@mixin media-landscape {
    @media (min-width: #{$mobile-landscape-width}) and (max-height: #{$mobile-landscape-height}) and (orientation: landscape) {
        @content;
    }

    @media only screen
    and (device-width: 375px)
    and (device-height: 812px)
    and (-webkit-device-pixel-ratio: 3)
    and (orientation: landscape) {
        @content;
    }
}

// This is breakpoint for narrow laptop screens. You can find width and height of narrow laptops (width is normal, but height should be decided on and updated)
@mixin media-laptop {
    @media (min-width: #{$narrow-laptop-width}) and (max-height: #{$narrow-laptop-height}) {
        @content;
    }
}

@mixin z {
    @media (min-width: map-get($grid-breakpoints, "z")) {
        @content;
    }
}

@mixin xs {
    @media (min-width: map-get($grid-breakpoints, "xs")) {
        @content;
    }
}
@mixin s {
    @media (min-width: map-get($grid-breakpoints, "s")) {
        @content;
    }
}
@mixin m {
    @media (min-width: map-get($grid-breakpoints, "m")) {
        @content;
    }
}
@mixin l {
    @media (min-width: map-get($grid-breakpoints, "l")) {
        @content;
    }
}
@mixin xl {
    @media (min-width: map-get($grid-breakpoints, "xl")) {
        @content;
    }
}

// -------------
// Layout mixins
// -------------
@mixin make-wrapper() {
    width: 100%;
    // padding-right: grid gap / 2
    // padding-left: grid gap / 2
    padding-right: 15px;
    padding-left: 15px;
    margin: 0 auto;
}

@mixin make-wrap() {
    display: flex;
    flex-wrap: wrap;
    // margin-right: ($grid-gutter-width / -2);
    // margin-left: ($grid-gutter-width / -2);
    margin-right: 15px;
    margin-left: 15px;
}

// For each breakpoint, define the maximum width of the wrapper in a media query
@mixin make-wrapper-max-widths($max-widths: $wrapper-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint, $wrapper-max-width in $max-widths {

        @include media-up($breakpoint, $breakpoints) {
            max-width: $wrapper-max-width;
        }
    }
}


// ---------------
// Container & wrapper classes
// ---------------
.wrapper {
    @include make-wrapper();
    @include make-wrapper-max-widths();
}

.wrap {
    @include make-wrap();
}

.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box;
}

.row {
    display: flex;
    flex-flow: row wrap;
}

// -------------------
// Grid 
// -------------
$grid-columns: 12;
$grid-gaps: (
    "0": 0,
    "1" :10px,
    "2": 20px,
    "3": 30px
);

// grip gaps: gap-2
@each $key, $val in $grid-gaps {
    .gap-#{$key} > * {
        padding: $val;
    }
    .gap-#{$key} {
        margin-left: -$val;
        margin-right: -$val;
    }
}

// col classes: _12 _7m _9l 
@include z {
    @for $i from 1 through $grid-columns {
        ._#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xs {
    @for $i from 1 through $grid-columns {
        ._#{$i}xs {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include s {
    @for $i from 1 through $grid-columns {
        ._#{$i}s {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include m {
    @for $i from 1 through $grid-columns {
        ._#{$i}m {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include l {
    @for $i from 1 through $grid-columns {
        ._#{$i}l {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xl {
    @for $i from 1 through $grid-columns {
        ._#{$i}xl {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}
